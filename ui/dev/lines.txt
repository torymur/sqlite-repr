Macros
We’ve
used
macros
like
println!
throughout
this
book,
but
we
haven’t
fully
explored
what
a
macro
is
and
how
it
works.
The
term
macro
refers
to
a
family
of
features
in
Rust:
declarative
macros
with
macro_rules!
and
three
kinds
of
procedural
macros:
Custom
#[derive]
macros
that
specify
code
added
with
the
derive
attribute
used
on
structs
and
enums
Attribute-like
macros
that
define
custom
attributes
usable
on
any
item
Function-like
macros
that
look
like
function
calls
but
operate
on
the
tokens
specified
as
their
argument
We’ll
talk
about
each
of
these
in
turn,
but
first,
let’s
look
at
why
we
even
need
macros
when
we
already
have
functions.
The
Difference
Between
Macros
and
Functions
Fundamentally,
macros
are
a
way
of
writing
code
that
writes
other
code,
which
is
known
as
metaprogramming.
In
Appendix
C,
we
discuss
the
derive
attribute,
which
generates
an
implementation
of
various
traits
for
you.
We’ve
also
used
the
println!
and
vec!
macros
throughout
the
book.
All
of
these
macros
expand
to
produce
more
code
than
the
code
you’ve
written
manually.
Metaprogramming
is
useful
for
reducing
the
amount
of
code
you
have
to
write
and
maintain,
which
is
also
one
of
the
roles
of
functions.
However,
macros
have
some
additional
powers
that
functions
don’t.
A
function
signature
must
declare
the
number
and
type
of
parameters
the
function
has.
Macros,
on
the
other
hand,
can
take
a
variable
number
of
parameters:
we
can
call
println!("hello")
with
one
argument
or
println!("hello
{}",
name)
with
two
arguments.
